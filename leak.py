import base64
import hashlib

from cryptography.hazmat.primitives.asymmetric import x448
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

rec =  {"type":1,"target":"ReceiveMessage","arguments":[{"id":"tOAtTVtUF9IhFoxS0V4RLw"}]}

client_public_key_base64 = "7HIGJ/GxeuBddyoH8H4OLhTNqTs5k/a/UsMu0C7VZ7SXp3UAzhYip4K8iM74QZwcFRb8s8Vm6Co="
server_private_key_base64 = "sIMEABejjZE9ggRd5CI7OgmU2Xy/PoJrSkhzJaXU99q2tv3sx1d+xhNzPnzPxsAoa4a4/FcHsto="
iv_base64 = "dIRT3sxbzCIwJxsYqfT2BA=="
encrypted_message_base64 = {"type":1,"invocationId":"2","target":"Upload","arguments":[""]}

# Декодирование base64
client_public_key = base64.b64decode(client_public_key_base64)
iv = base64.b64decode(iv_base64)
encrypted_key = base64.b64decode(server_private_key_base64)
encrypted_message = base64.b64decode(encrypted_message_base64["arguments"][0])

# Генерация приватного ключа сервера (предполагается, что это приватный ключ)
server_private_key = (x448.X448PrivateKey.from_private_bytes(encrypted_key))

# Получение общего секрета
shared_secret = server_private_key.exchange(x448.X448PublicKey.from_public_bytes(client_public_key))

# Расшифровка ключа AES
cipher = Cipher(algorithms.AES(hashlib.sha256(shared_secret).digest()), modes.CBC(iv))
decryptor = cipher.decryptor()
decrypted_message = decryptor.update(encrypted_message) + decryptor.finalize()

with open('data.zip', 'wb') as fp:
    fp.write(decrypted_message)