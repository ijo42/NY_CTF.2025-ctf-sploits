# n: 7
# k: 6
# prime: 151405605815346723037670775309214102458458261477727040916675896166244758170964684705986576383365062901537269000135803851746830333161057564663561374883901515306645301749481537512433551305862529946546960514657780234190502790142286452028922195648079185560303981683633831246558901740785531654156037373371777680701
#
# Share: (1, 120035298423404780095428291477293982885073268822096661168509252587276035231043039374773140416177412940048009024241100273987581045980641399173069559817222802276724494858314775377438046093311400484344493015759853212063547398303282385874989233754582530573221227248820585461314872843198567230066595951588353132203)
# Share: (2, 75933545190756316979130210881654863889641603564382209616827627973251171086855308566576614993871049103027914779592894851779900134877176696372029584308997638849410196268382221125633690446198568858570520371418555657501634098955719616700804898638396475515529856344134493816637673060779005922303832560735879564383)
# Share: (3, 35698272283299671935514159156508045578179299654802923461851771573883383580846997579732918817920347470929713942869092832803763393409784182215628892996537319386156621223765589231423234410835385627396885004658660705009527267540208001846804186665755080304460809355413418531108608002928309721617555654202199927128)
# Share: (4, 69309226286230535876504286283901601092737453258250889617749932611540896777736279791285103235467779850161365232219605330668253631299701316922937136331349007385108035273077879946358104629384869818810399404862143869148118474456491017321503162914454305284065571549354390899448217936112809598962086587503057911131)
# Share: (5, 75146089131476485208057783165735473405476553445131254310526548099119475322486485386309461231873041285553160537095335383390402970556567678534509402544848764536258410083100702938080116885055495856579808962683399770092000174138559047067559168985124983738813672336250358898166270229702514538757859352378127300118)
# Share: (6, 9223410471171683772023724123418879488115597315383555425938619156649233311172644205201365573357366277436634048484575567114526141087883040460673574265779115360022290069140458054053676568754186049193266337536641046622221170266743741025476397574892217156176925631251084888247465946085086522507167776615613042279)
# Share: (7, 114425540051131584788001909397527714481381205122503054857412087327901443161848028590961106949647844998723471389149405609831553776308465449029817685137626611845805659025384516085297979145739303078795805825083297269119042080979812373197311467051034770489213670215624043317837146430779815512409912723876852321699)
#
# answer: 10336524694431725755412510165996128384276670370011401158515136326594289878287289121220181851133931925203952377343642640991078081429012113964654386761322899

data = {
    'required_shares': 6,
    'prime_mod': 151405605815346723037670775309214102458458261477727040916675896166244758170964684705986576383365062901537269000135803851746830333161057564663561374883901515306645301749481537512433551305862529946546960514657780234190502790142286452028922195648079185560303981683633831246558901740785531654156037373371777680701,
    'shares': [(1,120035298423404780095428291477293982885073268822096661168509252587276035231043039374773140416177412940048009024241100273987581045980641399173069559817222802276724494858314775377438046093311400484344493015759853212063547398303282385874989233754582530573221227248820585461314872843198567230066595951588353132203),
               (2,75933545190756316979130210881654863889641603564382209616827627973251171086855308566576614993871049103027914779592894851779900134877176696372029584308997638849410196268382221125633690446198568858570520371418555657501634098955719616700804898638396475515529856344134493816637673060779005922303832560735879564383),
               (3,35698272283299671935514159156508045578179299654802923461851771573883383580846997579732918817920347470929713942869092832803763393409784182215628892996537319386156621223765589231423234410835385627396885004658660705009527267540208001846804186665755080304460809355413418531108608002928309721617555654202199927128),
               (4,69309226286230535876504286283901601092737453258250889617749932611540896777736279791285103235467779850161365232219605330668253631299701316922937136331349007385108035273077879946358104629384869818810399404862143869148118474456491017321503162914454305284065571549354390899448217936112809598962086587503057911131),
               (5,75146089131476485208057783165735473405476553445131254310526548099119475322486485386309461231873041285553160537095335383390402970556567678534509402544848764536258410083100702938080116885055495856579808962683399770092000174138559047067559168985124983738813672336250358898166270229702514538757859352378127300118),
               (6,9223410471171683772023724123418879488115597315383555425938619156649233311172644205201365573357366277436634048484575567114526141087883040460673574265779115360022290069140458054053676568754186049193266337536641046622221170266743741025476397574892217156176925631251084888247465946085086522507167776615613042279),
               (7,114425540051131584788001909397527714481381205122503054857412087327901443161848028590961106949647844998723471389149405609831553776308465449029817685137626611845805659025384516085297979145739303078795805825083297269119042080979812373197311467051034770489213670215624043317837146430779815512409912723876852321699)]
}

from decimal import Decimal, getcontext


def reconstruct_secret(shares, prime):
    """
    Восстанавливает секрет, используя схему разделения секрета Шамира.

    :param shares: список кортежей (x, y), представляющих доли секрета
    :param prime: простое число, используемое в схеме Шамира
    :return: восстановленный секрет
    """
    getcontext().prec = 2000  # Устанавливаем высокую точность для Decimal

    secret = 0
    for i, (x_i, y_i) in enumerate(shares):
        numerator = Decimal(1)
        denominator = Decimal(1)

        for j, (x_j, _) in enumerate(shares):
            if i != j:
                numerator *= Decimal(x_j)
                denominator *= Decimal(x_j - x_i)

        secret += Decimal(y_i) * numerator / denominator

    return int(secret) % prime

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host ctf.mf.grsu.by --port 9040
from pwn import *

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'ctf.mf.grsu.by'
port = int(args.PORT or 9040)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

for _ in range(50):
    io.recvuntil("n:")
    n = int(io.recvline())
    k = int(io.recvline().decode().split(' ')[1])
    prime = int(io.recvline().decode().split(' ')[1])
    print(f"n: {n}")
    print(f"k: {k}")
    print(f"p: {prime}")
    io.recvlines(2)
    shares = []
    for i in range(1, n + 1):
        s= io.recvline().decode().split(' ')[2][:-2]
        # print(s)
        shares.append((i, Decimal(s)))

    secret = reconstruct_secret(shares, prime)
    io.recvlines(1)
    io.recvuntil(b" ")
    s = f"{secret}\n".encode()
    print('sent: ', s)
    io.send(s)
    # print(io.recvline())
print(io.recvall().decode())
